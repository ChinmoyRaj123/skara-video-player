{"mappings":";AAAA,QAAO,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CZ,CAAA;AAED,aAAoB,YAAY,CAAC;AGjDjC;IACE,OAAO,EAAE,WAAW,CAAC;CACtB;AGGD,wBAAiB,YAAW,QAAQ;gBAGtB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAiB9C,KAAK,CAAC,EAAE,EAAE,WAAW;IAIrB,UAAU,CAAC,IAAI,EAAE,MAAM;IAI9B,IAAW,OAAO,gBAEjB;CACF;AC/BD,yBAAkB,YAAW,QAAQ;gBAEvB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAuBrD,IAAW,OAAO,gBAEjB;CACF;AC1BD,8BAAuB,YAAW,QAAQ;gBAK5B,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAmC9C,MAAM,CAAC,MAAM,EAAE,WAAW;IAgBjC,IAAW,OAAO,gBAEjB;CACF;AC/DD,iBAAiB;IACf,IAAI,EAAE,QAAQ,EAAE,CAAA;IAChB,KAAK,EAAE,QAAQ,EAAE,CAAA;CAClB,CAAA;AACD,iBAAU,YAAW,QAAQ;gBAIf,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,SAAS;IAmBtC,IAAW,OAAO,gBAEjB;IAED,IAAW,OAAO,YAEjB;IAEM,IAAI;IAKJ,IAAI;IAKJ,MAAM,CAAC,IAAI,EAAE,QAAQ;IAIrB,OAAO,CAAC,IAAI,EAAE,QAAQ;CAG9B;AElDD,wBAAiB,YAAW,QAAQ;gBAKtB,MAAM,EAAE,YAAY;IAYzB,WAAW,CAAC,IAAI,EAAE,MAAM;IAIxB,cAAc,CAAC,IAAI,EAAE,MAAM;IAIlC,IAAW,OAAO,gBAEjB;CACF;AC3BD,yBAAkB,YAAW,QAAQ;gBAWvB,MAAM,EAAE,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,gBAAgB,EAAU,MAAM,EAAE,YAAY;IAiIzF,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM;IAK/C,IAAW,OAAO,gBAEjB;CACF;ACnJD,gCAAgC;IAC9B,MAAM,EAAE,WAAW,CAAA;IACnB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAA;IAChB,GAAG,CAAC,EAAE,GAAG,CAAA;CACV,CAAA;AA8JD,4BAAqB,YAAW,QAAQ;IAC/B,YAAY,UAAS;gBAehB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAiB9C,IAAI;IAOJ,IAAI;IAOX,IAAW,OAAO,CAAC,EAAE,EAAE,MAAM,EAG5B;IAED,IAAW,YAAY,CAAC,IAAI,EAAE,MAAM,EAGnC;IAEM,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,wBAAwB;IA0D9D,mBAAmB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG;IA4CpD,IAAW,OAAO,gBAEjB;IACD,IAAW,YAAY,gBAEtB;IAcM,QAAQ,CAAC,EAAE,EAAE,WAAW;CAGhC;AC5VD;;IAUE,GAAG;IAGH,IAAI;IAKJ,IAAI;IAKJ,KAAK,CAAC,EAAE,EAAE,WAAW;CAGtB;ACvBD,0BAAmB,YAAW,QAAQ;gBAKxB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IA0BrD,IAAI;IAMJ,IAAI;IAMJ,IAAW,OAAO,gBAEjB;CAEF;AE7CD,qBAAc,YAAW,QAAQ;gBAQnB,WAAW,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAwBnD,IAAI;IAKJ,IAAI;IAKX,IAAW,OAAO,gBAEjB;IAED,IAAW,OAAO,YAEjB;CACF;AEpDD,wBAAiB,YAAW,QAAQ;gBAIpB,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,YAAY;IAY9C,KAAK,CAAC,EAAE,EAAE,WAAW;IAI5B,IAAW,OAAO,gBAEjB;CACJ;ACND,2BAA2B;IACzB,GAAG,EAAE,MAAM,CAAA;IACX,SAAS,EAAE,MAAM,CAAA;IACjB,UAAU,EAAE,MAAM,CAAA;IAClB,cAAc,EAAE,MAAM,CAAA;IACtB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,KAAK,CAAC,EAAE,MAAM,CAAA;IACd,KAAK,CAAC,EAAE,KAAK,CAAA;IACb,KAAK,EAAE,MAAM,CAAA;IACb,QAAQ,EAAE,OAAO,CAAA;IACjB,KAAK,EAAE,OAAO,CAAA;IACd,IAAI,EAAE,OAAO,CAAA;IACb,cAAc,EAAE,OAAO,CAAA;IACvB,mBAAmB,EAAE,OAAO,CAAA;IAC5B,aAAa,EAAE,OAAO,CAAA;IACtB,eAAe,EAAE,OAAO,CAAA;IACxB,aAAa,EAAE,OAAO,CAAA;IACtB,aAAa,EAAE,OAAO,CAAA;IACtB,cAAc,EAAE,OAAO,CAAA;IACvB,YAAY,EAAE,OAAO,CAAA;IACrB,cAAc,EAAE,OAAO,CAAA;IACvB,cAAc,EAAE,OAAO,CAAA;CACxB,CAAA;AAED,iBAAiB,QAAQ,GACvB,gBAAgB,GAChB,SAAS,GACT,OAAO,GACP,OAAO,GACP,cAAc,GACd,YAAY,GACZ,YAAY,GACZ,SAAS,GACT,SAAS,GACT,OAAO,GACP,SAAS,CAAC;AAsEZ;;GAEG;AACH,qBAAM,WAAW;IA+DiC,MAAM,EAAE,YAAY;IApCpE;;;MAGE;IACK,QAAQ,EAAE,cAAc,GAAG,IAAI,CAAA;IAEtC;;MAEE;IACK,OAAO,EAAE,GAAG,CAAC;IAGb,QAAQ,EAAE,UAAU,CAAC;IACrB,QAAQ,EAAE,gBAAgB,CAAC;IAC3B,WAAW,EAAE,UAAU,CAAC;IACxB,YAAY,EAAE,WAAW,CAAC;IAC1B,QAAQ,EAAE,cAAc,CAAC;IACzB,UAAU,EAAE,YAAY,CAAC;IACzB,QAAQ,EAAE,OAAO,CAAC;IAClB,QAAQ,EAAE,OAAO,CAAC;IAClB,WAAW,EAAE,UAAU,CAAC;IAIxB,aAAa,EAAE,OAAO,CAAA;IAM7B;;;;;OAKG;gBACS,EAAE,EAAE,cAAc,GAAG,MAAM,EAAS,MAAM,GAAE,YAA4B;IAwJpF;;OAEG;IACG,KAAK;IAgEX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8BG;IACI,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,IAAI;IAIhD;;;OAGG;IACH,IAAW,IAAI,mBAEd;IAED;;MAEE;IACF,IAAW,MAAM,YAEhB;IACD;;;;OAIG;IACI,KAAK;IAIZ;;;;OAIG;IACI,IAAI;IAKJ,OAAO;IAOd;;;;;;;;;;OAUG;IACH,IAAW,YAAY,IAeO,MAAM,CAbnC;IAED;;;;;;;;;;OAUG;IACH,IAAW,YAAY,CAAC,IAAI,EAAE,MAAM,EAKnC;IAED;;OAEG;IACH,IAAW,QAAQ,WAElB;IAED;;;;;OAKG;IACH,IAAW,WAAW,IAUO,MAAM,CARlC;IAED;;;;;QAKI;IACJ,IAAW,WAAW,CAAC,IAAI,EAAE,MAAM,EASlC;IAED;;;;;OAKG;IACI,WAAW,CAAC,IAAI,GAAE,MAAuB;IAIhD;;;;;SAKK;IACE,YAAY,CAAC,IAAI,GAAE,MAAuB;IAKjD;;;;;OAKG;IACH,IAAW,MAAM,IAUM,MAAM,CAR5B;IAED;;;;;QAKI;IACJ,IAAW,MAAM,CAAC,GAAG,EAAE,MAAM,EAG5B;IAED;;;;OAIG;IACH,IAAW,KAAK,IASM,OAAO,CAP5B;IAED;;;;OAIG;IACH,IAAW,KAAK,CAAC,GAAG,EAAE,OAAO,EAE5B;IAED;;;;OAIG;IACH,IAAW,KAAK,YAEf;IAED;;;;OAIG;IACI,SAAS,CAAC,IAAI,SAAkB;IAOvC;;;;SAIK;IACE,SAAS,CAAC,IAAI,SAAkB;IAUhC,SAAS,aAGf;IAEM,SAAS,aAGf;IAED;;MAEE;IACK,WAAW;IAqDX,gBAAgB;IAMhB,gBAAgB,CAAC,EAAE,EAAE,cAAc;IAI1C,IAAW,YAAY,YAEtB;IAEY,gBAAgB;IAe7B,IAAW,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAEf;CAkIF;AAED,eAAe,WAAW,CAAC","sources":["src/src/theme.ts","src/src/keyboard-shortcut.ts","src/src/constant.ts","src/src/controlls/index.ts","src/src/components/play-button.ts","src/src/icons.ts","src/src/controlls/play-button.ts","src/src/controlls/full-src-button.ts","src/src/controlls/volume-controll.ts","src/src/controlls/osd.ts","src/src/helper.ts","src/src/controlls/watch-timer.ts","src/src/controlls/progress-bar.ts","src/src/controlls/setting.ts","src/src/controlls/spinner.ts","src/src/controlls/center-button.ts","src/src/controlls/progress-container-wrapper.ts","src/src/controlls/tool-bar.ts","src/src/controlls/orientation.ts","src/src/controlls/brand-image.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import styles from \"./style.module.css\"\nimport Hls, { Level } from \"hls.js\"\nimport { theme, Theme } from \"./theme\"\n\nimport { AttachKeyboardShortcuts } from \"./keyboard-shortcut\"\nimport { SEEK_TIME_STEP, VOL_CF, VOL_CHANGE_STEP } from \"./constant\"\nimport PlayButton from \"./controlls/play-button\"\nimport { Material } from \"./icons\"\nimport FullSrcCtrl from \"./controlls/full-src-button\"\nimport VolumeController from \"./controlls/volume-controll\"\nimport Osd from \"./controlls/osd\"\nimport WatchTimer from \"./controlls/watch-timer\"\nimport ProgressBar from \"./controlls/progress-bar\"\nimport SettingControl from \"./controlls/setting\"\nimport Spinner from \"./controlls/spinner\"\nimport CenterButton from \"./controlls/center-button\"\nimport PrgsContainerWrapper from \"./controlls/progress-container-wrapper\"\nimport Toolbar from \"./controlls/tool-bar\"\nimport OrientationLock from \"./controlls/orientation\"\nimport BrandImage from \"./controlls/brand-image\"\n\nexport type PlayerConfig = {\n  src: string\n  mediaType: string\n  brandImage: string\n  videoThumbnail: string\n  height?: string\n  width?: string\n  theme?: Theme\n  title: string\n  autoplay: boolean\n  muted: boolean\n  loop: boolean\n  showBrandImage: boolean\n  showCenterPlayPause: boolean\n  showPlayPause: boolean\n  showProgressBar: boolean\n  showTimestamp: boolean\n  showVolumeBar: boolean\n  showVideoTitle: boolean\n  showSettings: boolean\n  showFullscreen: boolean\n  showBackButton: boolean\n}\n\ntype EventName = 'loaded' |\n  'metadataloaded' |\n  'playing' |\n  'pause' |\n  'ended' |\n  'volumechange' |\n  'ratechange' |\n  'timeupdate' |\n  'waiting' |\n  'stalled' |\n  'abort' |\n  'suspend';\n\nconst defaultConfig: PlayerConfig = {\n  title: \"\",\n  src: \"\",\n  mediaType: \"\",\n  brandImage: \"\",\n  videoThumbnail: \"\",\n  autoplay: false,\n  muted: false,\n  loop: false,\n  showBrandImage: true,\n  showCenterPlayPause: true,\n  showPlayPause: true,\n  showProgressBar: true,\n  showTimestamp: true,\n  showVolumeBar: true,\n  showVideoTitle: true,\n  showSettings: true,\n  showFullscreen: true,\n  showBackButton: true,\n  theme: {\n    colors: {\n      primary: \"\",\n      secondary: \"\",\n      textColor: \"\",\n      centerIconButtonColor: \"\",\n      centerIconButtonHoverColor: \"\",\n      iconButtonColor: \"\",\n      iconButtonHoverColor: \"\",\n      brandColor: \"\",\n      progressBGColor: \"\",\n      progressLoadedColor: \"\",\n      progressForegroundColor: \"\",\n      progressCircleColor: \"\",\n      volumeBarBGColor: \"\",\n      volumeBarForegroundColor: \"\",\n      settingsBGColor: \"\",\n      settingsTextColor: \"\",\n      settingsHoverColor: \"\",\n      tooltipTextColor: \"\",\n      tooltipBGColor: \"\",\n      textOpacity: \"\",\n      centerIconButtonOpacity: \"\",\n      iconButtonOpacity: \"\",\n      brandOpacity: \"\",\n      progressOpacity: \"\",\n      volumeOpacity: \"\",\n      settingsOpacity: \"\",\n      tooltipOpacity: \"\",\n    },\n    spacing: {\n      padding: \"\",\n      margin: \"\",\n      bottomBarSpacing: \"\",\n      playerControlMargin: \"\",\n      playerCornerRadius: \"\",\n      centerIconButtonCornerRadius: \"\",\n      centerIconButtonPadding: \"\",\n      centerIconButtonSize: \"\",\n      iconButtonCornerRadius: \"\",\n      iconButtonPadding: \"\",\n      iconButtonSize: \"\",\n      progressBarHeight: \"\",\n      progressBarHoverScale: \"\",\n      volumeBarHeight: \"\",\n      tooltipCornerRadius: \"\"\n    },\n  }\n}\n/**\n * @class SkaraPlayer\n */\nclass SkaraPlayer {\n  /**\n  * The `videoEl` parent element. This is the root element of the player\n  */\n  private _root: HTMLDivElement\n\n  /**\n  * The Html5 video element\n  */\n  private _videoEl: HTMLVideoElement;\n\n  private _videoThumbnail: HTMLDivElement;\n\n  private _thumbnailImage: HTMLImageElement;\n\n  private hls: Hls | null\n\n  /**\n  * Set when hls levels are loaded for the time \n  * This is used to not to create level change every time `LEVEL_LOADED` event\n  * fired\n  */\n  private levelLoaded = false\n\n\n  private _theme: Theme;\n\n  /**\n  * The pogress bar inside the osd. \n  * This is the bar which actually changes its background with time change\n  */\n  public _prgsBar: HTMLDivElement | null\n\n  /** \n  * The whole OSD bar element. The parent of progess bar and other control elements\n  */\n  public _osdBar: Osd;\n\n  // Controlls and Components\n  public _playBtn: PlayButton;\n  public _volCtrl: VolumeController;\n  public _watchTimer: WatchTimer;\n  public _progressBar: ProgressBar;\n  public _setting: SettingControl;\n  public _centerBtn: CenterButton;\n  public _spinner: Spinner;\n  public _toolBar: Toolbar;\n  public _brandImage: BrandImage;\n\n  private detachKeyHandler;\n\n  public _isFullscreen: boolean\n\n\n  // Events\n  private events: { [k in EventName]?: () => void }\n\n  /**\n   * @constructor\n   * @param el - The html element where the player will be mounted\n   * @param config - player options\n   * @returns SkaraPlayer\n   */\n  constructor(el: HTMLDivElement | string, public config: PlayerConfig = defaultConfig) {\n    // Setting default variables\n    this._prgsBar = null;\n    this.events = {}\n    this._isFullscreen = false;\n    this.hls = null;\n\n    // The the root element \n    // FIXME: This can be a `Node` or `string`\n    if (el instanceof HTMLDivElement) {\n      this._root = el;\n    } else {\n      const root = document.querySelector<HTMLDivElement>(`#${el}`);\n      if (!root) throw new Error(`can not mount player on ${root}`);\n      this._root = root\n    }\n    this._root.classList.add(styles.root)\n\n    // Theme from config\n    // TODO: Need a better implimentation\n    this._theme = config.theme || theme\n\n    // Set video element height and width if provided\n    if (this.config.width) this._root.style.width = this.config.width;\n    if (this.config.height) this._root.style.height = this.config.height;\n\n    //Creating thumbnail for video element\n    this._videoThumbnail = document.createElement('div')\n    this._videoThumbnail.style.width = \"100%\"\n    this._videoThumbnail.style.height = \"100%\"\n    this._videoThumbnail.style.zIndex = \"13\"\n    this._thumbnailImage = document.createElement('img')\n    this._thumbnailImage.src = config.videoThumbnail\n    this._thumbnailImage.style.width = \"100%\"\n    this._thumbnailImage.style.height = \"100%\"\n    this._videoThumbnail.appendChild(this._thumbnailImage)\n    this._root.appendChild(this._videoThumbnail)\n\n\n    // Creating the Html5 video element\n    this._videoEl = document.createElement('video')\n    this._videoEl.autoplay = this.config.autoplay\n    this._videoEl.muted = this.config.muted\n    this._videoEl.loop = this.config.loop\n    this._videoEl.className = styles.video\n\n    this._playBtn = new PlayButton(this, this.config);\n    this._volCtrl = new VolumeController(this, this.config);\n    this._watchTimer = new WatchTimer(this.config);\n    this._setting = new SettingControl(this, this.config);\n    this._brandImage = new BrandImage(this, this.config);\n\n\n    // Creating the OSD \n    this._osdBar = new Osd({\n      left: [this._playBtn, this._volCtrl],\n      right: [\n        this._brandImage,\n        this._setting,\n      ]\n    })\n\n    this._progressBar = new ProgressBar(this, this._osdBar, this._videoEl, this.config);\n    const progressContainerWrapper = new PrgsContainerWrapper(this._progressBar, this._watchTimer)\n\n    // Adding progess bar in the OSD\n    // @ts-ignore\n    this._osdBar.prepend(progressContainerWrapper)\n\n    if (config?.theme) {\n\n      console.log(\"config in player\", config);\n\n\n      const newtheme = document.querySelector(':root') as HTMLElement;\n      const setRootVariables = (vars: Record<string, string>) => Object.entries(vars).forEach(v => newtheme?.style?.setProperty(v[0], v[1]));\n      const colorVariables = {\n        // \"--skaraVideoPrimaryColor\": this.theme?.colors?.primary,\n        \"--skaraVideoPrimaryColor\": this.theme?.colors?.primary,\n        \"--skaraVideoSecondaryColor\": this.theme?.colors?.secondary,\n        \"--textColor\": this.theme?.colors?.textColor,\n\n        \"--bottomBarSpacing\": this.theme?.spacing?.bottomBarSpacing,\n        \"--playerControlMargin\": this.theme?.spacing?.playerControlMargin,\n        \"--playerCornerRadius\": this.theme?.spacing?.playerCornerRadius,\n        \"--centerIconButtonCornerRadius\": this.theme?.spacing?.centerIconButtonCornerRadius,\n        \"--centerIconButtonPadding\": this.theme?.spacing?.centerIconButtonPadding,\n        \"--centerIconButtonSize\": this.theme?.spacing?.centerIconButtonSize,\n        \"--iconButtonCornerRadius\": this.theme?.spacing?.iconButtonCornerRadius,\n        \"--iconButtonPadding\": this.theme?.spacing?.iconButtonPadding,\n        \"--iconButtonSize\": this.theme?.spacing?.iconButtonSize,\n        \"--progressBarHeight\": this.theme?.spacing?.progressBarHeight,\n        \"--progressBarHoverScale\": this.theme?.spacing?.progressBarHoverScale,\n        \"--volumeBarHeight\": this.theme?.spacing?.volumeBarHeight,\n        \"--tooltipCornerRadius\": this.theme?.spacing?.tooltipCornerRadius,\n\n        \"--centerIconButtonColor\": this.theme?.colors?.centerIconButtonColor,\n        \"--centerIconButtonHoverColor\": this.theme?.colors?.centerIconButtonHoverColor,\n        \"--iconButtonColor\": this.theme?.colors?.iconButtonColor,\n        \"--iconButtonHoverColor\": this.theme?.colors?.iconButtonHoverColor,\n        \"--brandColor\": this.theme?.colors?.brandColor,\n        \"--progressBGColor\": this.theme?.colors?.progressBGColor,\n        \"--progressLoadedColor\": this.theme?.colors?.progressLoadedColor,\n        \"--progressForegroundColor\": this.theme?.colors?.progressForegroundColor,\n        \"--progressCircleColor\": this.theme?.colors?.progressCircleColor,\n        \"--volumeBarBGColor\": this.theme?.colors?.volumeBarBGColor,\n        \"--volumeBarForegroundColor\": this.theme?.colors?.volumeBarForegroundColor,\n        \"--settingsBGColor\": this.theme?.colors?.settingsBGColor,\n        \"--settingsTextColor\": this.theme?.colors?.settingsTextColor,\n        \"--settingsHoverColor\": this.theme?.colors?.settingsHoverColor,\n        \"--tooltipTextColor\": this.theme?.colors?.tooltipTextColor,\n        \"--tooltipBGColor\": this.theme?.colors?.tooltipBGColor,\n\n\n\n        \"--textOpacity\": this.theme?.colors?.textOpacity,\n        \"--centerIconButtonOpacity\": this.theme?.colors?.centerIconButtonOpacity,\n        \"--iconButtonOpacity\": this.theme?.colors?.iconButtonOpacity,\n        \"--progressOpacity\": this.theme?.colors?.progressOpacity,\n        \"--volumeOpacity\": this.theme?.colors?.volumeOpacity,\n        \"--settingsOpacity\": this.theme?.colors?.settingsOpacity,\n      }\n      setRootVariables(colorVariables)\n    }\n\n    // Attch the idle and inactivity checker\n    window.onload = () => {\n      this.idleHandler()\n    };\n\n    // The spinner while player waits for data\n    this._spinner = new Spinner();\n    this._spinner.addTo(this._root)\n\n    this._centerBtn = new CenterButton(this, this.config);\n    this._root.appendChild(this._centerBtn.element);\n    // Showing the center button at initial because player autoplay is off\n    this._centerBtn.show();\n\n    this._toolBar = new Toolbar(new FullSrcCtrl(this, this.config), this.config);\n    // attaching events\n    this.attachEventListeners();\n\n    // Keyboard shortcuts\n    this.detachKeyHandler = AttachKeyboardShortcuts(this);\n\n    this._root.appendChild(this._videoEl);\n    this._root.appendChild(this._osdBar.element);\n    this._root.appendChild(this._toolBar.element);\n    return this\n  }\n\n  /**\n   * Starts the player \n   */\n  async start() {\n    this.idleHandler()\n    // let fileType\n    // const hlsarr = [\"audio/x-mpegurl\", \"application/vnd.apple.mpegurl\", \"application/x-mpegurl\"]\n    // const r = await fetch(this.config.src, { method: 'HEAD' })\n    // fileType = r.headers.get('Content-Type')\n    if (this.config.mediaType === \"m3u8\") {\n      if (Hls.isSupported()) {\n        this.hls = new Hls()\n        this.hls.loadSource(this.config.src)\n        this.hls.attachMedia(this._videoEl)\n        this.hls.on(Hls.Events.MEDIA_ATTACHED, function () {\n          console.log('video and hls.js are now bound together !');\n        });\n        this.hls.on(Hls.Events.LEVEL_LOADED, () => {\n          if (this.levelLoaded) return\n          const setting = this._setting.createWindow({ player: this, levels: this.hls?.levels, hls: this.hls as Hls })\n          this._root.appendChild(setting)\n          this.levelLoaded = true\n        });\n\n        this.hls.on(Hls.Events.LEVEL_SWITCHED, () => {\n          // TODO: when fixed from setting itself remove this code\n          const activeIconWrapper = document.querySelectorAll(\".iconWrapper\")\n          activeIconWrapper.forEach((item) => {\n            if (item.hasChildNodes()) {\n              item.firstChild?.remove()\n            }\n            if (item.getAttribute('data-id') === `quality_${this.hls?.currentLevel}`) {\n              const activeIcon = document.createElement('div');\n              activeIcon.className = styles.indicatorIcon\n              item.appendChild(activeIcon)\n            }\n          });\n          this._setting.quality = this.hls?.currentLevel as number;\n        })\n\n        this.hls.on(Hls.Events.ERROR, (_, data) => {\n          if (data.fatal) {\n            switch (data.type) {\n              case Hls.ErrorTypes.NETWORK_ERROR:\n                // try to recover network error\n                console.log('fatal network error encountered, try to recover');\n                this.hls?.startLoad();\n                break;\n              case Hls.ErrorTypes.MEDIA_ERROR:\n                console.log('fatal media error encountered, try to recover');\n                this.hls?.recoverMediaError();\n                break;\n              default:\n                // cannot recover\n                this.hls?.destroy();\n                break;\n            }\n          }\n        });\n      } else {\n        console.log(\"Your browser does not support hls streaming\")\n      }\n    } else {\n      this._videoEl.src = this.config.src\n    }\n  }\n\n  /**\n   * @summary\n   * Attach an event handler to the player instance \n   *\n   * `loaded` - Fired when the frame at the current playback position of the media has finished loading; often the first frame.\n   *\n   * `metadataloade` - Fired when the metadata has been loaded\n   *\n   * `playing` - Fired when the video starts playing\n   *\n   * `paused` - Fired when the player is paused\n   *\n   * `ended` - Fired when when video has finished playing \n   *\n   * `volumechange` - Fired when the player volume is changed\n   *\n   * `ratechange`  Fired when the playback rate has changed \n   *\n   * `timeupdate` - Fired when the `currentTime` has changed \n   *\n   * `waiting` - Fired when when the player is loading data or buffurring \n   *\n   * `stalled` - Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.\n   *\n   * `abort` -  Fired when the resource was not fully loaded, but not as the result of an error \n   *\n   * `suspend` - Fired when media data loading has been suspended.\n   *\n   * @param event - Name of the event \n   * @param callback - The callback function for the event handler \n   */\n  public on(event: EventName, callback: () => void) {\n    this.events[event] = callback\n  }\n\n  /**\n   * @readonly\n   * The root element of the player\n   */\n  public get root() {\n    return this._root\n  }\n\n  /**\n  * @readonly Tells whether the is paused  \n  */\n  public get paused() {\n    return this._videoEl.paused\n  }\n  /**\n   *  @summary\n   *  Method will pause playback of the media, \n   *  if the media is already in a paused state this method will have no effect.\n   */\n  public pause() {\n    return this._videoEl.pause()\n  }\n\n  /** \n   * @summary\n   * Attempts to begin playback of the media. \n   * It returns a `Promise` which is resolved when playback has been successfully started. \n   */\n  public play() {\n    this._videoThumbnail.style.display = \"none\";\n    return this._videoEl.play();\n  }\n\n  public dispose() {\n    this.detachKeyHandler();\n    this.hls?.destroy();\n    this._videoEl.src = \"\";\n    this._videoEl.load()\n  }\n\n  /**\n   * @summary\n   * Sets the rate at which the media is being played back. \n   * This is used to implement user controls for fast forward, slow motion, and so forth. \n   * The normal playback rate is multiplied by this value to obtain the current rate, \n   * so a value of `1.0` indicates normal speed.\n   *\n   * If `playbackRate` is negative, the media is not played backwards.\n   * \n   * Accepted values must be between `025` to `2.0`\n   */\n  public get playbackRate() {\n    return this._videoEl.playbackRate;\n  }\n\n  /**\n   * @summary\n   * Sets the rate at which the media is being played back. \n   * This is used to implement user controls for fast forward, slow motion, and so forth. \n   * The normal playback rate is multiplied by this value to obtain the current rate, \n   * so a value of `1.0` indicates normal speed.\n   *\n   * If `playbackRate` is negative, the media is not played backwards.\n   * \n   * Accepted values must be between `025` to `2.0`\n   */\n  public set playbackRate(rate: number) {\n    if (rate < .25 || rate > 2) {\n      throw new Error(\"playback rate must between .25 and 2\");\n    }\n    this._videoEl.playbackRate = rate\n  }\n\n  /**\n   * @readonly Indicates the length of the media in seconds.\n   */\n  public get duration() {\n    return this._videoEl.duration;\n  }\n\n  /**\n   * @summary\n   * Specifies the current playback time of the media in seconds.\n   * Changing the value `currentTime` will seek the media to new time.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime\n   */\n  public get currentTime() {\n    return this._videoEl.currentTime\n  }\n\n  /**\n    * @summary\n    * Specifies the current playback time of the media in seconds.\n    * Changing the value `currentTime` will seek the media to new time.\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime\n    */\n  public set currentTime(time: number) {\n    if (time < 0) {\n      throw new Error(\"Error setting currentTime: time can not be less then 0\");\n    }\n\n    if (time > this.duration) {\n      throw new Error(\"Error setting currentTime: time exceeded\");\n    }\n    this._videoEl.currentTime = time;\n  }\n\n  /**\n   * @summary \n   * Seeks the media in forward\n   *\n   * @param step - The number of seconds the go forward\n   */\n  public seekForward(step: number = SEEK_TIME_STEP) {\n    if (this.currentTime + step > this.duration) return;\n    this._videoEl.currentTime = this.currentTime + step;\n  }\n  /**\n     * @summary \n     * Seeks the media in backward\n     *\n     * @param step - The number of seconds the go backward\n     */\n  public seekBackward(step: number = SEEK_TIME_STEP) {\n    if (this.currentTime - step <= 0) return;\n    this._videoEl.currentTime = this.currentTime - step;\n  }\n\n  /**\n   * @summary\n   * Sets and Gets the volume at which the media will be played \n   * A `double` value must fall between `0` and `1`\n   * where `0` is effectively muted and `1` is the loudest possible value \n   */\n  public get volume() {\n    return this._videoEl.volume;\n  }\n\n  /**\n    * @summary\n    * Sets and Gets the volume at which the media will be played \n    * A `double` value must fall between `0` and `1`\n    * where `0` is effectively muted and `1` is the loudest possible value \n    */\n  public set volume(vol: number) {\n    if (vol < 0 || vol > 1) throw new Error(\"volume must be number between 0 and 1\");\n    this._videoEl.volume = vol\n  }\n\n  /**\n   * @summary \n   * Sets and Gets whether the player is muted\n   * A `true` value means the player is muted \n   */\n  public get muted() {\n    return this._videoEl.muted;\n  }\n\n  /**\n   * @summary \n   * Sets and Gets whether the player is muted\n   * A `true` value means the player is muted \n   */\n  public set muted(val: boolean) {\n    this._videoEl.muted = val;\n  }\n\n  /**\n   * @summary\n   * Indiates whether the media playback has ended or not \n   * A `true` value indicates the playback has ended\n   */\n  public get ended() {\n    return this._videoEl.ended;\n  }\n\n  /**\n   * @summary \n   * Increased the playback volume \n   * @param step - The value to increase volume\n   */\n  public incVolume(step = VOL_CHANGE_STEP) {\n    if (this.volume === 1) return\n    // Calculating correct vol by avoiding floating point precision error\n    const vol = ((step * VOL_CF) + (this.volume * VOL_CF)) / VOL_CF;\n    if (this.muted) this.muted = !this.muted\n    this.volume = vol\n  }\n  /**\n     * @summary \n     * Decreses the playback volume \n     * @param step - The value to decrease volume\n     */\n  public decVolume(step = VOL_CHANGE_STEP) {\n    if (this.volume <= 0) {\n      this.muted = true;\n      return;\n    }\n    // Calculating correct vol by avoiding floating point precision error\n    const vol = ((this.volume * VOL_CF) - (step * VOL_CF)) / VOL_CF;\n    this.volume = vol\n  }\n\n  public showCtrls = () => {\n    this._osdBar.show();\n    this._toolBar.show();\n  }\n\n  public hideCtrls = () => {\n    this._osdBar.hide();\n    this._toolBar.hide();\n  }\n\n  /**\n  * This method check for idle and inactive in the browser and hides and show osd \n  */\n  public idleHandler() {\n    let time: number;\n    const resetTimer = () => {\n      clearTimeout(time);\n      time = setTimeout(this.hideCtrls, 3000)\n      // 1000 milliseconds = 1 second\n    }\n    // window.onload = resetTimer;\n    // DOM Events\n    //window.addEventListener('load', resetTimer, true);\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    events.forEach(function (name) {\n      document.addEventListener(name, resetTimer, true);\n    });\n    this._osdBar.element.addEventListener('mouseenter', () => {\n      this.showCtrls()\n      clearTimeout(time)\n    })\n    this._osdBar.element.addEventListener('mouseleave', () => {\n      this.hideCtrls()\n      resetTimer()\n    })\n    this._osdBar.element.addEventListener('mousemove', () => {\n      this.showCtrls()\n      clearTimeout(time)\n    })\n    this._toolBar.element.addEventListener('mouseenter', () => {\n      this.showCtrls()\n      clearTimeout(time)\n    })\n    this._toolBar.element.addEventListener('mouseleave', () => {\n      this.hideCtrls()\n      resetTimer()\n    })\n    this._toolBar.element.addEventListener('mousemove', () => {\n      this.showCtrls()\n      clearTimeout(time)\n    })\n\n    this._videoEl.addEventListener('mouseenter', () => {\n      if (window.navigator.maxTouchPoints > 0) return;\n      this.showCtrls();\n    })\n    this._videoEl.addEventListener('mouseleave', () => {\n      this.hideCtrls()\n    })\n    this._videoEl.addEventListener('mousemove', () => {\n      if (window.navigator.maxTouchPoints > 0) return;\n      this.showCtrls();\n    })\n  };\n\n\n  public getProgressBarEl() {\n    return this._prgsBar\n  }\n\n\n  // FIXME: Can we do it better that a setter method?\n  public setProgressBarEl(el: HTMLDivElement) {\n    this._prgsBar = el\n  }\n\n  public get isFullscreen() {\n    return this._isFullscreen;\n  }\n\n  public async toggleFullScreen() {\n    try {\n      if (document.fullscreenElement) {\n        await document.exitFullscreen()\n        this._isFullscreen = false\n      } else {\n        await this.root.requestFullscreen()\n        this._isFullscreen = true\n      }\n    } catch (e) {\n      // TODO: must be a toast message \n      console.log(e)\n    }\n  }\n\n  public get theme() {\n    return this._theme;\n  }\n\n  private attachEventListeners() {\n    document.addEventListener('click', (e) => {\n      const target = e.target;\n      if (this._setting.innerElement.isSameNode(target as HTMLElement)) {\n        return\n      };\n      if (this._setting.contains(target as HTMLElement)) {\n        return;\n      }\n      if (this._setting.popupVisible) {\n        this._setting.hide();\n      }\n    });\n\n    this._videoEl.addEventListener('click', (_) => {\n      if (this._setting.popupVisible) return;\n\n      if (!this._toolBar.visible || !this._osdBar.visible) {\n        this.showCtrls();\n        return;\n      }\n\n      this._videoEl.paused ? this.play() : this.pause();\n    });\n\n    this._videoEl.addEventListener('touch', (_) => {\n      if (this._setting.popupVisible) return;\n\n      if (!this._toolBar.visible || !this._osdBar.visible) {\n        this.showCtrls();\n        return;\n      }\n\n      this._videoEl.paused ? this.play() : this.pause();\n    });\n\n\n    this._videoEl.addEventListener('dblclick', () => {\n      if (document.fullscreenElement) {\n        document.exitFullscreen()\n      } else {\n        this._root.requestFullscreen()\n      }\n    });\n\n    this._videoEl.addEventListener('loadedmetadata', () => {\n      this.events.metadataloaded && this.events.metadataloaded();\n    })\n\n    this._videoEl.addEventListener('canplay', () => {\n      this._spinner.hide()\n    });\n\n    this._videoEl.addEventListener('volumechange', () => {\n      this._volCtrl.update(this);\n      this.events.volumechange && this.events.volumechange();\n    });\n\n    this._videoEl.addEventListener('play', () => {\n      this._spinner.hide();\n      this._playBtn.changeIcon(Material.PauseIcon);\n      this._centerBtn.hide();\n      this.events.playing && this.events.playing()\n    });\n\n    this._videoEl.addEventListener('pause', () => {\n      this._playBtn.changeIcon(Material.PlayIcon)\n      this._centerBtn.show();\n      this.events.pause && this.events.pause()\n    });\n\n    this._videoEl.addEventListener('ended', () => {\n      this._playBtn.changeIcon(Material.ReplayIcon);\n      this._videoThumbnail.style.display = \"block\";\n      this.events.ended && this.events.ended()\n    })\n\n    this._videoEl.addEventListener('loadeddata', () => {\n      console.log('video loaded')\n      this._watchTimer.setDuration(this.duration);\n      this._spinner.hide()\n      this.events.loaded && this.events.loaded()\n    });\n\n    this._videoEl.addEventListener('ratechange', () => {\n      const activeIconWrapper = document.querySelectorAll(\".currSpeed\")\n      activeIconWrapper.forEach((item) => {\n        if (item.hasChildNodes()) {\n          item.firstChild?.remove()\n        }\n        if (item.getAttribute('data-id') === `speed_${this.playbackRate}`) {\n          const activeIcon = document.createElement('div');\n          activeIcon.className = styles.indicatorIcon\n          item.appendChild(activeIcon)\n        }\n      });\n      this._setting.playbackRate = this.playbackRate;\n      this.events.ratechange && this.events.ratechange();\n    })\n\n    // Showing playing time\n    this._videoEl.addEventListener('timeupdate', () => {\n      this._watchTimer.setCurrentTime(this.currentTime)\n      this._progressBar.update(this, this.currentTime)\n      this.events.timeupdate && this.events.timeupdate();\n    });\n\n    this._videoEl.addEventListener('waiting', (_) => {\n      console.log(\n        \"waitng\"\n      )\n      this._centerBtn.hide();\n      this._spinner.show()\n\n      this.events.waiting && this.events.waiting();\n    });\n\n    this._videoEl.addEventListener('abort', () => {\n      this.events.abort && this.events.abort();\n    })\n    this._videoEl.addEventListener('suspend', () => {\n      this.events.suspend && this.events.suspend();\n    })\n    this._videoEl.addEventListener('stalled', () => {\n      this.events.stalled && this.events.stalled();\n    })\n  }\n\n}\n\nexport default SkaraPlayer;\n"],"names":[],"version":3,"file":"index.d.ts.map"}